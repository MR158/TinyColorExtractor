{"version":3,"sources":["tiny-color-extractor.js"],"names":["TinyColorExtractor","options","callback","_this","this","_classCallCheck","src","Error","quality","tolerance","colorCount","imgURL","hasOwnProperty","image","crossOrigin","addEventListener","pixels","CanvasImage","getPixels","getColorData","then","colorData","length","color","rTol","gTol","bTol","flag","m","split","n","result","Image","abs","Math","console","colorMap","rgb","colors","item","push","Promise","resolve","reject","sort","x","y","i","rgbFormat","offset","canvas","document","createElement","context","getContext","width","height","getImageData","data"],"mappings":"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","file":"tiny-color-extractor.min.js","sourcesContent":["class TinyColorExtractor {\r\n  /**\r\n   * TinyColorExtractor constructor function\r\n   *\r\n   * @param {Object} options - See README\r\n   * @constructor\r\n   */\r\n  constructor(options, callback){\r\n    if(typeof options === 'object'){\r\n      if(typeof options.src !== 'string') throw new Error('The value of src is incorrect');\r\n      if(options.quality <= 0|| options.quality > 10|| typeof options.quality !== 'number') throw new Error('The value of quality is incorrect');\r\n      if(options.tolerance <= 0|| options.tolerance > 100|| typeof options.tolerance !== 'number') throw new Error('The value of tolerance is incorrect');\r\n      if(options.colorCount <= 0|| typeof options.colorCount !== 'number') throw new Error('The value of colorCount is incorrect');\r\n      this.imgURL = options.src;\r\n      this.quality = options.hasOwnProperty('quality') ? 11 - options.quality : 5;\r\n      this.tolerance = options.hasOwnProperty('tolerance') ? options.tolerance : 10;\r\n      this.colorCount = options.hasOwnProperty('colorCount') ? options.colorCount : 5;\r\n    } else {\r\n      if(typeof options !== 'string') throw new Error('The value of src is incorrect');\r\n      this.imgURL = options;\r\n      this.quality = 5;\r\n      this.tolerance = 10;\r\n      this.colorCount = 5;\r\n    }\r\n\r\n    let image = new Image();\r\n    image.crossOrigin = '*';\r\n    image.src = this.imgURL;\r\n    image.addEventListener('load',()=>{\r\n      this.pixels = new CanvasImage(image).getPixels();\r\n      this.getColorData().then((colorData)=>{\r\n        if(this.colorCount > colorData.length) throw new Error('ColorCount value beyond the range');\r\n        let result = [];\r\n        for(let m = 0, color, preColor, rTol, gTol, bTol, flag = true; m < this.colorCount; m++){\r\n          if(result.length > 0){\r\n            color = colorData[m][0].split(',');\r\n            for(let n = 0; n < result.length; n++){\r\n              rTol = Math.abs(color[0] - result[n][0]);\r\n              gTol = Math.abs(color[1] - result[n][1]);\r\n              bTol = Math.abs(color[2] - result[n][2]);\r\n              if(rTol < this.tolerance || gTol < this.tolerance || bTol < this.tolerance){\r\n                flag = false;\r\n                break;\r\n              }else{\r\n                flag = true;\r\n              }\r\n            }\r\n            if(flag){\r\n              result.push(color);\r\n            }else if(this.colorCount < colorData.length){\r\n              this.colorCount += 1;\r\n            }else{\r\n              console.warn('tolerance overcounted, failed to gain enough data');\r\n              this.colorCount = colorData.length;\r\n            }\r\n          }else{\r\n            result.push(colorData[m][0].split(','));\r\n          }\r\n        }\r\n        callback(result);\r\n      });\r\n    });\r\n  }\r\n  getColorData(){\r\n    let colors = {};\r\n    let colorData = [];\r\n    this.colorMap(rgb=>{\r\n       colors[rgb] = rgb in colors? colors[rgb] += 1: 1;\r\n    })\r\n    for(let item in colors){\r\n      colorData.push([item,colors[item]]);\r\n    }\r\n    return new Promise((resolve,reject)=>{\r\n      resolve(colorData.sort((x,y)=>{\r\n        return y[1] - x[1];\r\n      }))\r\n    })\r\n  }\r\n  colorMap(callback){\r\n    for(let i = 0; i < this.pixels.length; i += 4 * this.quality){\r\n      if(this.pixels[i+3] < ( 1 << 8 ) / 2 ) continue;\r\n      callback(this.rgbFormat(i));\r\n    }\r\n  }\r\n  rgbFormat(offset){\r\n    return `${this.pixels[offset]},${this.pixels[offset+1]},${this.pixels[offset+2]}`;\r\n  }\r\n}\r\n\r\nclass CanvasImage {\r\n  constructor(image){\r\n    this.canvas = document.createElement('canvas');\r\n    this.context = this.canvas.getContext('2d');\r\n\r\n    this.canvas.width = this.width = image.width;\r\n    this.canvas.height = this.height = image.height;\r\n\r\n    this.context.drawImage(image,0,0,image.width,image.height);\r\n  }\r\n  getPixels(){\r\n    return this.context.getImageData(0,0,this.width,this.height).data;\r\n  }\r\n}\r\n"]}